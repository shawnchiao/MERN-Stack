{"version":3,"file":"static/js/950.bc1a775e.chunk.js","mappings":"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","sources":["shared/components/FormElements/randomDefaultColor.js","shared/components/FormElements/ImageUpload.js","shared/components/FormElements/Input.js","shared/components/UIElements/Card.js","shared/hooks/form-hook.js","shared/util/validators.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","user/pages/Auth.js"],"sourcesContent":["const defaultColor = [\n  `AliceBlue`,\n  `AntiqueWhite`,\n  `Aqua`,\n  `Aquamarine`,\n  `Azure`,\n  `Beige`,\n  `Bisque`,\n  `Black`,\n  `BlanchedAlmond`,\n  `Blue`,\n  `BlueViolet`,\n  `Brown`,\n  `BurlyWood`,\n  `CadetBlue`,\n  `Chartreuse`,\n  `Chocolate`,\n  `Coral`,\n  `CornflowerBlue`,\n  `Cornsilk`,\n  `Crimson`,\n  `Cyan`,\n  `DarkBlue`,\n  `DarkCyan`,\n  `DarkGoldenRod`,\n  `DarkGray`,\n  `DarkGrey`,\n  `DarkGreen`,\n  `DarkKhaki`,\n  `DarkMagenta`,\n  `DarkOliveGreen`,\n  `Darkorange`,\n  `DarkOrchid`,\n  `DarkRed`,\n  `DarkSalmon`,\n  `DarkSeaGreen`,\n  `DarkSlateBlue`,\n  `DarkSlateGray`,\n  `DarkSlateGrey`,\n  `DarkTurquoise`,\n  `DarkViolet`,\n  `DeepPink`,\n  `DeepSkyBlue`,\n  `DimGray`,\n  `DimGrey`,\n  `DodgerBlue`,\n  `FireBrick`,\n  `FloralWhite`,\n  `ForestGreen`,\n  `Fuchsia`,\n  `Gainsboro`,\n  `GhostWhite`,\n  `Gold`,\n  `GoldenRod`,\n  `Gray`,\n  `Grey`,\n  `Green`,\n  `GreenYellow`,\n  `HoneyDew`,\n  `HotPink`,\n  `IndianRed`,\n  `Indigo`,\n  `Ivory`,\n  `Khaki`,\n  `Lavender`,\n  `LavenderBlush`,\n  `LawnGreen`,\n  `LemonChiffon`,\n  `LightBlue`,\n  `LightCoral`,\n  `LightCyan`,\n  `LightGoldenRodYellow`,\n  `LightGray`,\n  `LightGrey`,\n  `LightGreen`,\n  `LightPink`,\n  `LightSalmon`,\n  `LightSeaGreen`,\n  `LightSkyBlue`,\n  `LightSlateGray`,\n  `LightSlateGrey`,\n  `LightSteelBlue`,\n  `LightYellow`,\n  `Lime`,\n  `LimeGreen`,\n  `Linen`,\n  `Magenta`,\n  `Maroon`,\n  `MediumAquaMarine`,\n  `MediumBlue`,\n  `MediumOrchid`,\n  `MediumPurple`,\n  `MediumSeaGreen`,\n  `MediumSlateBlue`,\n  `MediumSpringGreen`,\n  `MediumTurquoise`,\n  `MediumVioletRed`,\n  `MidnightBlue`,\n  `MintCream`,\n  `MistyRose`,\n  `Moccasin`,\n  `NavajoWhite`,\n  `Navy`,\n  `OldLace`,\n  `Olive`,\n  `OliveDrab`,\n  `Orange`,\n  `OrangeRed`,\n  `Orchid`,\n  `PaleGoldenRod`,\n  `PaleGreen`,\n  `PaleTurquoise`,\n  `PaleVioletRed`,\n  `PapayaWhip`,\n  `PeachPuff`,\n  `Peru`,\n  `Pink`,\n  `Plum`,\n  `PowderBlue`,\n  `Purple`,\n  `Red`,\n  `RosyBrown`,\n  `RoyalBlue`,\n  `SaddleBrown`,\n  `Salmon`,\n  `SandyBrown`,\n  `SeaGreen`,\n  `SeaShell`,\n  `Sienna`,\n  `Silver`,\n  `SkyBlue`,\n  `SlateBlue`,\n  `SlateGray`,\n  `SlateGrey`,\n  `Snow`,\n  `SpringGreen`,\n  `SteelBlue`,\n  `Tan`,\n  `Teal`,\n  `Thistle`,\n  `Tomato`,\n  `Turquoise`,\n  `Violet`,\n  `Wheat`,\n  `White`,\n  `WhiteSmoke`,\n  `Yellow`,\n  `YellowGreen`,\n];\n\n\nexport const randomDefaultColor = () => {\n  const randomNumber = Math.floor(Math.random()*146)\n  return defaultColor[randomNumber]\n};\n\n","import React, { useEffect, useRef, useState } from 'react';\n\nimport Button from './Button';\nimport {randomDefaultColor} from './randomDefaultColor';\nimport './ImageUpload.css';\n\nconst ImageUpload = props => {\n  const filePickerRef = useRef();\n  const [file, setFile] = useState();\n  const [previewUrl, setPreviewUrl] = useState();\n  const [isValid, setIsValid] = useState();\n\n  useEffect(() => {\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend= ()=> {\n        setPreviewUrl(reader.result);\n      } ;\n      reader.readAsDataURL(file);     \n    }\n  },[file])\n\n  const random = () => {\n    const randomNumber = Math.round(1000*Math.random());\n    const url = `https://avatars.dicebear.com/api/avataaars/:seed${randomNumber}.svg?background=${randomDefaultColor()}`\n    setPreviewUrl(url);\n    const randomPhoto = url\n    props.onInput(props.id, randomPhoto, true)\n  };\n\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n\n  const pickedHandler = (event) => {\n\n    let fileIsValid = isValid;\n    let pickedFile;\n    if (event.target.files && event.target.files.length === 1) {\n      setFile(event.target.files[0]);\n      pickedFile = event.target.files[0]\n      setIsValid(true);\n      fileIsValid = true;\n    } else {\n     fileIsValid = true;\n     setIsValid(false);\n    }\n    props.onInput(props.id, pickedFile, fileIsValid )\n  }\n\n\n  return (\n    <div className='form-control'>\n      <input\n        id={props.id}\n        ref={filePickerRef}\n        type='file'\n        style={{ display: 'none' }}\n        accept=\".jpg, .png, .jpeg\"\n        onChange={pickedHandler}\n      />\n      <div className={`image-upload ${props.center && \"center\"}`}>\n        <div className={`image-upload__preview ${props.circle && \"circle\"}`}>\n         {previewUrl && <img src={previewUrl} alt=\"Preview\" className={ props.circle && 'circle'} /> }      \n        </div>\n        <Button type=\"button\" onClick={pickImageHandler}>PICK IMAGE</Button>\n        {props.randomButton && <Button inverse  type=\"button\" onClick={random}>RANDOM</Button>}\n      </div>\n      {!isValid && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default ImageUpload;","import React, { useReducer, useEffect } from 'react';\n\nimport { validate } from '../../util/validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n    case 'TOUCH': {\n      return {\n        ...state,\n        isTouched: true\n      }\n    }\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',\n    isTouched: false,\n    isValid: props.initialValid || false\n  });\n\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    onInput(id, value, isValid)\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n\n  const element =\n    props.element === 'input' ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control ${!inputState.isValid && inputState.isTouched &&\n        'form-control--invalid'}`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid }\n        },\n        isValid: formIsValid\n      };\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  });\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid: formValidity\n    });\n  }, []);\n\n  return [formState, inputHandler, setFormData];\n};","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import React, { useState, useContext } from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport  useHttpClient  from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\nimport './Auth.css';\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: '',\n        isValid: false\n      },\n      password: {\n        value: '',\n        isValid: false\n      }\n    },\n    false\n  );\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: undefined,\n          image : undefined\n        },\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: '',\n            isValid: false\n          },\n          image: {\n              value: null,\n              isValid : false\n          }\n        },\n        false\n      );\n    }\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  const authSubmitHandler = async event => {\n    event.preventDefault();\n\n    if (isLoginMode) {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/users/login`,\n          'POST',\n          JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value\n          }),\n          {\n            'Content-Type': 'application/json'\n          }\n        );\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {}\n    } else {\n      try {\n        const formData = new FormData();\n        formData.append('name', formState.inputs.name.value);\n        formData.append('email', formState.inputs.email.value);\n        formData.append('password', formState.inputs.password.value);\n        formData.append('image', formState.inputs.image.value);\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/users/signup`,\n          'POST',\n          formData\n        );\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {}\n    }\n  };\n\n\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Card className=\"authentication\">\n        {isLoading && <LoadingSpinner asOverlay />}\n        <h2>Login Required</h2>\n        <hr />\n        <form onSubmit={authSubmitHandler}>\n          {!isLoginMode && (\n            <Input\n              element=\"input\"\n              id=\"name\"\n              type=\"text\"\n              label=\"Your Name\"\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText=\"Please enter a name.\"\n              onInput={inputHandler}\n            />\n          )}\n          {!isLoginMode && (\n          <ImageUpload \n            circle\n            randomButton\n            id=\"image\" \n            center \n            onInput={inputHandler}\n            errorText=\"Please provide an image.\"  \n            />\n          )}\n       \n          <Input\n            element=\"input\"\n            id=\"email\"\n            type=\"email\"\n            label=\"E-Mail\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid email address.\"\n            onInput={inputHandler}\n          />\n          <Input\n            element=\"input\"\n            id=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            validators={[VALIDATOR_MINLENGTH(6)]}\n            errorText=\"Please enter a valid password, at least 6 characters.\"\n            onInput={inputHandler}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            {isLoginMode ? 'LOGIN' : 'SIGNUP'}\n          </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>\n          SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\n        </Button>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default Auth;\n"],"names":["defaultColor","props","filePickerRef","useRef","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","useEffect","reader","FileReader","onloadend","result","readAsDataURL","className","id","ref","type","style","display","accept","onChange","event","pickedFile","fileIsValid","target","files","length","onInput","center","circle","src","alt","Button","onClick","current","click","randomButton","inverse","randomNumber","Math","round","random","url","floor","randomDefaultColor","randomPhoto","errorText","inputReducer","state","action","value","val","validate","validators","isTouched","useReducer","initialValue","initialValid","inputState","dispatch","changeHandler","touchHandler","element","placeholder","onBlur","rows","htmlFor","label","children","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","i","F","s","n","done","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","validator","trim","test","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","email","password","inputHandler","setFormData","authSubmitHandler","preventDefault","process","JSON","stringify","responseData","login","userId","token","formData","FormData","append","name","image","ErrorModal","onClear","Card","LoadingSpinner","asOverlay","onSubmit","Input","ImageUpload","disabled","undefined","prevMode"],"sourceRoot":""}